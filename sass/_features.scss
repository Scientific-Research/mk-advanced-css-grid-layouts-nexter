.features {
  // background-color: $color-grey-light-2;
  grid-column: center-start / center-end;

  // some definitions for our feature items:
  margin: 15rem 0;

  // We have TWO grids here:
  // we have a big grid which contains all the six grid items and one grid item for one feature
  // and each feature is a grid container itself which contains these three grid items:
  // icon, headline and text.
  // Grid allows us to nest as many grids inside of each other and it is very helpful!
  // We can use Grid for big two dimensional layouts and also for small one like our design here!
  display: grid;
  // grid-template-columns: repeat(3, 1fr);
  // when we want to make our page responsive, instead of using fixed parameters like repeat(3, 1fr),
  // we have to use auto-fit and minmax() function.
  // auto-fit will create as many tracks as can fit in our container base on the width which we defined already!
  // for example here, we use minmax() function to define our width between min. 25rem => 250px
  // and max. 1fr
  // Based on this, auto-fit tries to fit as manay tracks as can in our container, when we are
  // trying to decrease or increase the dimensions of the page in responsive mode!
  // when the column becomes less than 250px, it will change the column number from three to
  // two columns.
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  grid-gap: 6rem;

  align-items: start; // we have to write this command in parent element(here) and not in child elements!
  // the default for align-items is stretch, that's why we see that the headline
  // is stretched for two items in right hand(secure and location),
  // because of they are long headlines, we will have an empty line in bottomn of the headlines
  // and then these two texts are not aligned with other 6 texts.
  // with align-items: start; it will push icon, headline and text to the beginning of the page!
  // with align-items: end; it will push icon, headline and text to the end of the page!
  // IMPORTANT: we don't see any changes for other six items, they don't go to the top and bottomn
  // when i chnage the command from start to end and vice versa, because they are big enough!

  // grid-template-rows: auto auto; we don't need this, the compiler do it automatically!
  // it will create for us as implicit rows and not explicit - it is just enough to define
  // the columns, then it will create us the rows automatically!
}

.feature {
  // feature is a grid item itself and would be a grid container.
  // we can nest the grid like flexbox deeply:
  // here we want to put the icon at the left hand in line of headline as first row
  // and the text at the bottomn of headline in second row, it means: 2 rows x 2 columns
  display: grid;
  grid-template-columns: min-content 1fr;
  // here to make a little bit gap between icon and texts in both direction of row and column!
  grid-row-gap: 1.5rem;
  grid-column-gap: 2.5rem;

  &__icon {
    fill: $color-primary;
    width: 4.5rem;
    height: 4.5rem;
    grid-row: 1 / span 2; // the icon takes the whole column, therefore, the text under
    // the icon moves to the right side!
    // OR
    // grid-row: 1 / -1; this doesn't work here, because we don't have explicit rows and
    // we have here only implicit rows!
    transform: translateY(-1rem); // this will move the icon a little bit to the top in Y direction
    // and we see now that the middle of icon is in line of middle of our headline!
  }

  &__text {
    font-size: 1.7rem;
  }
}
