// COLOR VARIABLES
$color-primary: #c69963;
$color-primary-dark: #b28451;

$color-secondary: #101d2c;

$color-grey-light-1: #f9f7f6;
$color-grey-light-2: #aaa;

$color-grey-dark-1: #54483a;
$color-grey-dark-2: #6d5d4b;

// FONT VARIABLES
$font-primary: "Nunito", sans-serif;
$font-display: "Josefin Sans", sans-serif;

// RESPONSIVE BREAKPOINTS:
// we use media query with em instead of percent like what we have done already!
$bp-largest: 75em; // 1200px / 16 (the default browser pixel) = 75em;
$bp-large: 62.5em; // 1000px / 16 (the default browser pixel) = 62.5em;
$bp-medium: 50em; // 800px / 16 (the default browser pixel) = 50em;

*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
  font-size: 62.5%; // 10px/16px = 62.5% => 1rem = 10px

  // to make it responsive for desktop first layout => max-width:1200px
  @media only screen and (max-width: $bp-largest) {
    font-size: 50%; // 8px/16px = 50% => 1rem = 8px instead of 10px => so, we will see the
    // font size smaller when we reach the px equal or smaller than 1200px!
  }
}

body {
  font-family: $font-primary;
  color: $color-grey-dark-2;
  font-weight: 300;
  line-height: 1.6;
}

.container {
  display: grid;
  // vw:viewport width  vh:viewport height
  // grid-template-rows: 1000px min-content 800px min-content min-content min-content;
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  // grid-template-columns: repeat(8, 1fr); // this produces 8 equally columns
  // we use width for entire 8 columns: something between 1100px to 1200px
  // for example, we use 1140px/8 = 142.5px bzw. 140px or 14rem is width for every column
  // grid-template-columns: repeat(8, 14rem); // but when we decrease and increase the width
  // of the page, the width of every column doesn't change, to make it changeable, we use
  // minmax() function
  grid-template-columns:
    [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(
      8,
      [col-start] minmax(min-content, 14rem) [col-end]
    )
    [center-end]
    minmax(6rem, 1fr) [full-end];
  // min would be min-content and max would be 14rem. So, we want to have 8 columns and every column
  // has to have width between min-content as minimum width and 140px as maximum width!
  // we made it also in this way that, when we decrease the size of page, this 1fr after sidebar
  // and after realtors (before center-start and before full-end) will have minimum 60px(6rem),
  // and maximum 1fr, that's means: it will have min 60px in responsive mode and not less than
  // this value, when we decrease the page size in responsive mode => minmax(6rem, 1fr)
  // in this situation, the smallest value for size would be 60px and after that when we continue
  // to shrink more, the columns will start to shrink from 140rem to min-content which is
  // smalles value for every column and other two extra columns will never will be smaller than
  // 60px. and this min 60px will ensure us that there will be always some margin between
  // our content and the end of the page!

  // the container and all the direct children => THIS IS ONLY FOR TEST PURPOSES
  // & > * {
  //   padding: 40px;
  //   font-size: 3rem;
  // }

  // to make it responsive for desktop first layout => max-width:1000px
  @media only screen and (max-width: $bp-large) {
    grid-template-rows: 6rem 80vh min-content 40vw repeat(3, min-content);
    // we add this 6rem => 6rem*8px(and not 10px anymore)= 48px at this responsive mode!
    grid-template-columns:
    // we remove at this width the sidebar from left side of the page and added a new row
    // with 6rem => 48px at the top!
      // [sidebar-start] 8rem [sidebar-end full-start]

      [full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end])
      [center-end]
      minmax(6rem, 1fr) [full-end];
  }

  // to make it responsive for desktop first layout => max-width:800px
  @media only screen and (max-width: $bp-medium) {
    // here we don't need the column, i removed it. we need only an extra row!
    // for the realtors to come down from right side when we are in equal or less than 800px!
    // we have to add an extra min-content => we have now two min-content!
    grid-template-rows: 6rem calc(100vh - 6rem) min-content min-content 40vw repeat(3, min-content);
    // we want that header to occupy all the page, when realtor section disappears!
    // that's why we use 100vh instead of 80vh!
    // calc(100vh - 6rem) will subtract 6rem from headers which is 100vh and we will have from
    // beginning the real header which is 100vh - 6rem and when we scroll to down, we
    // go directly to features section.
  }
}
